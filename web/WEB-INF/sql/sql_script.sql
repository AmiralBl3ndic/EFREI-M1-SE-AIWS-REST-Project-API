#region Cleanup
DROP TABLE IF EXISTS DIRECTED_BY;
DROP TABLE IF EXISTS DEVELOPPED_BY;
DROP TABLE IF EXISTS DVD_COMMENTS;
DROP TABLE IF EXISTS BOOK_COMMENTS;
DROP TABLE IF EXISTS VG_COMMENTS;
DROP TABLE IF EXISTS DVD_RATINGS;
DROP TABLE IF EXISTS BOOK_RATINGS;
DROP TABLE IF EXISTS VG_RATINGS;
DROP TABLE IF EXISTS DEVELOPERS;
DROP TABLE IF EXISTS MOVIE_PEOPLE;
DROP TABLE IF EXISTS DVDS;
DROP TABLE IF EXISTS BOOKS;
DROP TABLE IF EXISTS VIDEOGAMES;
DROP TABLE IF EXISTS USERS;
#endregion

#region Users
CREATE TABLE USERS (
    ID_USER INT PRIMARY KEY AUTO_INCREMENT,
    EMAIL VARCHAR(200) UNIQUE NOT NULL,
    PASSWORD VARCHAR(120) NOT NULL,
    CITY VARCHAR(500) NOT NULL
);
#endregion

#region Main resources tables
CREATE TABLE DVDS (
    ID_DVD INT PRIMARY KEY AUTO_INCREMENT,
    ID_USER INT NOT NULL,  -- No Foreign Key to avoid problems if a user deletes his account
    TITLE VARCHAR(500),
    TYPE VARCHAR(256),
    DESCRIPTION VARCHAR(10000),
    EDITOR VARCHAR(500),
    AUDIO VARCHAR(256),
    RELEASEDATE VARCHAR(256),
    AGELIMIT INT,
    DURATION INT
);

CREATE TABLE VIDEOGAMES (
    ID_VIDEO_GAME INT PRIMARY KEY AUTO_INCREMENT,
    ID_USERS INT NOT NULL,  -- No Foreign Key to avoid problems if a user deletes his account
    NAME VARCHAR(1000),
    TYPE VARCHAR(256),
    RESUME VARCHAR(10000),
    VIDEO_GAME_EDITOR VARCHAR(256),
    RELEASEDATE VARCHAR(256)
);

CREATE TABLE BOOKS (
    ID_BOOK INT PRIMARY KEY AUTO_INCREMENT,
    ID_USERS INT NOT NULL,  -- No Foreign Key to avoid problems if a user deletes his account
    AUTHOR VARCHAR(500),
    TITLE VARCHAR(1000),
    TYPE VARCHAR(256),
    DESCRIPTION VARCHAR(10000),
    RELEASEDATE VARCHAR(256),
    EDITOR VARCHAR(500),
    AGELIMIT INT
);
#endregion

#region Comments tables
CREATE TABLE DVD_COMMENTS (
    COMMENT_ID INT PRIMARY KEY AUTO_INCREMENT,
    ID_DVD_COMMENTED INT NOT NULL,
    ID_COMMENTER_DVD INT NOT NULL,  -- No Foreign Key to avoid problems if a user deletes his account
    COMMENT_CONTENT VARCHAR(10000),
    CONSTRAINT FK_DVD_COMM FOREIGN KEY (ID_DVD_COMMENTED) REFERENCES DVDS (ID_DVD) ON DELETE CASCADE
);

CREATE TABLE VG_COMMENTS (
    COMMENT_ID INT PRIMARY KEY AUTO_INCREMENT,
    ID_VG_COMMENTED INT,
    ID_COMMENTER_VG INT,  -- No Foreign Key to avoid problems if a user deletes his account
    COMMENT_CONTENT VARCHAR(10000),
    CONSTRAINT FK_VG_COMM FOREIGN KEY (ID_VG_COMMENTED) REFERENCES VIDEOGAMES (ID_VIDEO_GAME) ON DELETE CASCADE  -- Needed to delete all related comments when a video-game is deleted
);

CREATE TABLE BOOK_COMMENTS (
    COMMENT_ID INT PRIMARY KEY AUTO_INCREMENT,
    ID_BOOK_COMMENTED INT NOT NULL,
    ID_COMMENTER INT NOT NULL,  -- No Foreign Key to avoid problems if a user deletes his account
    COMMENT_CONTENT VARCHAR(10000),
    CONSTRAINT FK_BOOK_COMM FOREIGN KEY (ID_BOOK_COMMENTED) REFERENCES BOOKS (ID_BOOK) ON DELETE CASCADE  -- Needed to delete all related comments when a book is deleted
);
#endregion

#region Ratings tables
CREATE TABLE DVD_RATINGS (
    RATING_ID INT PRIMARY KEY AUTO_INCREMENT,
    ID_DVD_RATED INT,
    ID_USER_RATING_DVD INT NOT NULL,  -- No Foreign Key to avoid problems if a user deletes his account
    DVD_RATING INT,
    UNIQUE KEY (ID_DVD_RATED, ID_USER_RATING_DVD),
    CONSTRAINT FK_DVD_RATED FOREIGN KEY (ID_DVD_RATED) REFERENCES DVDS (ID_DVD) ON DELETE CASCADE
);

CREATE TABLE VG_RATINGS (
    RATING_ID INT PRIMARY KEY AUTO_INCREMENT,
    ID_VG_RATED INT NOT NULL,
    ID_USER_RATING INT NOT NULL,  -- No Foreign Key to avoid problems if a user deletes his account
    RATING_VG INT,
    UNIQUE KEY (ID_VG_RATED, ID_USER_RATING),
    CONSTRAINT FK_VG_RATED FOREIGN KEY (ID_VG_RATED) REFERENCES VIDEOGAMES (ID_VIDEO_GAME) ON DELETE CASCADE  -- Needed to delete all related ratings when a video-game is deleted
);

CREATE TABLE BOOK_RATINGS (
    RATING_ID INT PRIMARY KEY AUTO_INCREMENT,
    ID_BOOK_RATED INT NOT NULL,
    ID_USER_RATING INT NOT NULL,  -- No Foreign Key to avoid problems if a user deletes his account
    RATING INT,
    UNIQUE KEY (ID_BOOK_RATED, ID_USER_RATING),  -- A user can only rate a resource once
    CONSTRAINT FK_BOOK_RATED FOREIGN KEY (ID_BOOK_RATED) REFERENCES BOOKS(ID_BOOK) ON DELETE CASCADE  -- Needed to delete all related ratings when a book is deleted
);
#endregion

#region Other tables
CREATE TABLE MOVIE_PEOPLE (
    ID_MOVIE_PEOPLE INT PRIMARY KEY AUTO_INCREMENT,
    NAME VARCHAR(500)
);

CREATE TABLE DIRECTED_BY (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    MOVIE_ID INT,
    MOVIE_PERSON_ID INT,
    CONSTRAINT FK_MOVIE FOREIGN KEY (MOVIE_ID) REFERENCES DVDS (ID_DVD) ON DELETE CASCADE,
    CONSTRAINT FK_MOVIE_PEOPLE FOREIGN KEY (MOVIE_PERSON_ID) REFERENCES MOVIE_PEOPLE (ID_MOVIE_PEOPLE)
);

CREATE TABLE DEVELOPERS (
    ID_DEVELOPER INT PRIMARY KEY AUTO_INCREMENT,
    NAME VARCHAR(256),
    LASTNAME VARCHAR(256)
);

CREATE TABLE DEVELOPPED_BY (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    VIDEO_GAME_ID INT,
    DEVELOPER_ID INT,
    CONSTRAINT FK_VIDEO_GAME FOREIGN KEY (VIDEO_GAME_ID) REFERENCES VIDEOGAMES (ID_VIDEO_GAME) ON DELETE CASCADE,
    CONSTRAINT FK_DEVELOPER FOREIGN KEY (DEVELOPER_ID) REFERENCES DEVELOPERS (ID_DEVELOPER)
);
#endregion
