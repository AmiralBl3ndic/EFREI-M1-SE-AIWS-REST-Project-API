package efrei.m1.aiws.dao;

import efrei.m1.aiws.model.User;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;
import lombok.NonNull;

import java.sql.*;

@NoArgsConstructor @AllArgsConstructor
public class UserDAOImpl implements DAO<User> {

	//SQL column names
	static final String DB_COL_ID="ID_USER";
	static final String DB_COL_EMAIL="EMAIL";
	static final String DB_COL_PASSWORD="PASSWORD";

	//Queries
	private static final String SQL_SELECT_BY_ID="SELECT ID, EMAIL FROM USERS WHERE ID_USER=?";
	private static final String SQL_INSERT_USER="INSERT INTO USERS(EMAIL, PASSWORD) VALUES (?,?)";
	private static final String SQL_UPDATE_USER="UPDATE USERS SET EMAIL = ?, PASSWORD = ? WHERE ID_USER = ?";
	private static final String DELETE_USER="DELETE FROM USERS WHERE ID_USER=?";

	private DAOFactory daoFactory;

	@Override
	public void create(@NonNull User user) {

		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet autoGeneratedKeys = null;

		try {
			connection = this.daoFactory.getConnection();

			// Insert query
			preparedStatement= DAOUtils.initPreparedStatement(connection,SQL_INSERT_USER, true, user.getEmail(), user.getPassword());
			int status = preparedStatement.executeUpdate();

			if (status == 0) {
				throw new DAOException("Failed to create user");
			}

			// Get autogenerated key for the users id
			autoGeneratedKeys=preparedStatement.getGeneratedKeys();
			if (!autoGeneratedKeys.next()) {
				throw new DAOException("Could not create the user, could not generate proper Id");
			}

		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			DAOUtils.silentClose(autoGeneratedKeys,preparedStatement,connection);
		}
	}

	@Override
	public void update(@NonNull User user) {
		Connection connection=null;
		PreparedStatement preparedStatement=null;

		//verifying the Id in input is not null
		if (user.getDbId() == null || user.getDbId().isEmpty()) {
			throw new DAOException("Cannot find the user to update");
		}

		try {
			connection = this.daoFactory.getConnection();
			preparedStatement=DAOUtils.initPreparedStatement(connection, SQL_UPDATE_USER,false,user.getEmail(),user.getPassword());
			int status=preparedStatement.executeUpdate();

			if (status == 0) {
				throw new DAOException("Could not update the user");
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			DAOUtils.silentClose(preparedStatement,connection);
		}
	}

	@Override
	public void delete(@NonNull User user) {
		Connection connection=null;
		PreparedStatement preparedStatement=null;

		// Cshecking if the user exists in the database
		if(user.getDbId() == null || user.getDbId().isEmpty()) {
			throw new DAOException("Could not delete the user, id not found");
		}

		try {
			connection=this.daoFactory.getConnection();
			preparedStatement= DAOUtils.initPreparedStatement(connection,DELETE_USER,false,user.getDbId());
			int status = preparedStatement.executeUpdate();

			if (status == 0) {
				throw new DAOException("Could not delete the user, query not executed");
			}
		} catch (SQLException e){
			throw new DAOException(e);
		} finally{
			DAOUtils.silentClose(preparedStatement,connection);
		}

	}

	@Override
	public User findBy(String id) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		User user = null;

		try {
			connection=this.daoFactory.getConnection();
			preparedStatement=DAOUtils.initPreparedStatement(connection,SQL_SELECT_BY_ID,false,id);
			resultSet=preparedStatement.executeQuery();

			//result set not empty

			if(resultSet.next()) {
				user = DAOUtils.mappingUser(resultSet);
			}
		} catch (SQLException e){
			throw new DAOException(e);
		} finally {
			DAOUtils.silentClose(resultSet,preparedStatement,connection);
		}

		return user;
	}
}
