package efrei.m1.aiws.dao;

import efrei.m1.aiws.model.User;
import lombok.NonNull;

import java.sql.*;

public class UserDAOImpl implements DAO<User> {

    //SQL column names
    static final String DB_COL_ID="ID_USER";
    static final String DB_COL_EMAIL="EMAIL";
    static final String DB_COL_PASSWORD="PASSWORD";

    //Queries
    private static final String SQL_SELECT_BY_ID="SELECT ID, EMAIL FROM USERS WHERE ID_USER=?";
    private static final String SQL_INSERT_USER="INSERT INTO USERS(EMAIL, PASSWORD) VALUES (?,?)";
    private static final String SQL_UPDATE_USER="UPDATE USERS SET EMAIL = ?, PASSWORD = ? WHERE ID_USER = ?";
    private static final String DELETE_USER="DELETE FROM USERS WHERE ID_USER=?";


    private DAOFactory daoFactory;

    @Override
    public void create(@NonNull User user) throws DAOException {

        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedKeys = null;

        try{
            connection=this.daoFactory.getConnection();
            preparedStatement= DAOUtils.initPreparedStatement(connection,SQL_INSERT_USER, true, user.getEmail(), user.getPassword());
            int status = preparedStatement.executeUpdate();

            if(status ==0){
                throw new DAOException("Failed to create user");
            }
            //Get autogenerated key for the users id
            autoGeneratedKeys=preparedStatement.getGeneratedKeys();
            if(!autoGeneratedKeys.next()){
                throw new DAOException("Could not create the user, could not generate proper Id")
            }

        } catch (SQLException e) {
            throw new DAOException(e);
        }
        finally {
            DAOUtils.
        }

    }

    @Override
    public void update(@NonNull User obj, String dbId) throws DAOException {

    }

    @Override
    public void delete(@NonNull User obj) throws DAOException {

    }

    @Override
    public User findById(String dbId) throws DAOException {
        return null;
    }
}
